#!/bin/bash
set -e

define(){ IFS=$'\n' read -r -d '' "${1}" || true; }

declare service_definition
declare namespace_definition
declare environment_definition
declare key_definition

script="$(basename "$0")"

define service_definition <<EOF
[service]
  the service you wish to list environment variables for
EOF

define environment_definition <<EOF
[environment]
  the environment you wish to manipulate environment variables for.
EOF

define namespace_definition <<EOF
[namespace]
  this is used to infer the bucket name to create to store the files in, also creates a KMS key to encrypt the files with.
EOF

define key_definition <<EOF
[key]
  the key of the environment variable key/value pair that you wish to remove. This needs to be all uppercase.
EOF

usage() {
cat <<-EOF
Usage:       $script [command] [namespace] [environment] -v

[commands]:
                 
  add
  key-id
  create-key
  list
  list-services
  remove
  remove-service
  copy

$namespace_definition

$environment_definition

Options: 
  -v : print verbose output of commands

Description:
  Manage enviroment variable files encrypted with KMS and stored in S3. It wraps the AWS CLI tools, so this is expected to be installed
  on the system. Allows you to separate these environment variables by environments, and services that you wish to load them into.
EOF
}

usage-key-id() {
cat <<-EOF
Usage:      $script key-id [namespace]

$namespace_definition
EOF
}

usage-create-key() {
cat <<-EOF
Usage:      $script create-key [namespace]

$namespace_definition
EOF
}

usage-list() {
cat <<-EOF
Usage:      $script list [namespace] [environment] [service]

$namespace_definition

$environment_definition

$service_definition

EOF
}

usage-list-services() {
cat <<-EOF
Usage:      $script list-services [namespace] [environment]

$namespace_definition

$environment_definition

Description:
  list the services that have an environment file under and a certain environment
EOF
}

usage-remove() {
cat <<-EOF
Usage:      $script remove [namespace] [environment] [service] [key]

$namespace_definition

$environment_definition

$service_definition

$key_definition
EOF
}

usage-remove-service() {
cat <<-EOF
Usage:      $script remove-service [namespace] [environment] [service]

$namespace_definition

$environment_definition

$service_definition
EOF
}

usage-add() {
cat <<-EOF
Usage:      $script add [namespace] [environment] [service] [key] [value]

$namespace_definition

$environment_definition

$service_definition

$key_definition

[value]
  the value you wish to set for the key.
EOF
}

usage-copy() {
cat <<-EOF
Usage:      $script copy [namespace] [environment] [service source] [service destination]

$namespace_definition

$environment_definition

[service source]
  the environment variables for a service you wish to copy from

[service destination]
  the service you wish to copy and environment variable file to.
EOF
}

validate_aws_creds() {
  local valid=true
  if test -z "${AWS_ACCESS_KEY_ID+x}"; then
    echo "please make sure you set AWS_ACCESS_KEY_ID"
    valid=false
  fi
  if test -z "${AWS_DEFAULT_REGION+x}"; then
    echo "please make sure you set AWS_DEFAULT_REGION"
    valid=false
  fi
  if test -z "${AWS_SECRET_ACCESS_KEY+x}"; then
    echo "please make sure you set AWS_SECRET_ACCESS_KEY"
    valid=false
  fi
  if test "$valid" = false; then
    echo "missing aws creds, please export them into your current shell session"
    exit 1
  fi
}

validate_key() {
  if [[ ! "$key" =~ ^[_0-9A-Z]*$ ]]; then
    log "environment variable names have to be all uppercase, be either letters, numbers, or underscores. No other characters are allowed"
    exit 1
  fi
}

validate_kms_key() {
  set_key
  if [ -z "$key_id" ]; then
    echo "you have yet to create a kms key, do so with the \"create-key\" command"
    exit 1
  fi
}

validate() {
  if [ "$1" -lt "$2" ]; then
    log "you need to provide args $#"
    eval "usage-$3"
    exit 1
  fi
}


log() {
 if [[ -n "$verbose" ]]; then
   echo "$1"
 fi
}

encrypt() {
  local path="$1"; shift
  local data="$1"; shift
  local key_id="$key_id"; shift
  aws kms encrypt --key-id "$key_id" --plaintext "$data" --query CiphertextBlob --output text | base64 --decode > "$path"
}

decrypt() {
  decrypted="$(aws kms decrypt --ciphertext-blob "fileb://$local_path_enc" --query Plaintext --output text | base64 --decode)"
}

push() {
  local local_path=$1; shift
  local remote_path=$1; shift
  log "pushing encrypted blob from $local_path to $remote_path"
  aws s3 cp "$local_path" "$remote_path" > /dev/null 2>&1
}

pull() {
  local local_path=$1; shift
  local remote_path=$1; shift
  log "pulling encrypted blob from $remote_path to $local_path"
  aws s3 cp "$remote_path" "$local_path" > /dev/null 2>&1
}

clean() {
  local local_path=$1; shift
  log "cleaning temp files"
  rm "$local_path"
}

set_key() {
  key_id="$(aws kms list-aliases --output text | grep "\salias/$app\s" | awk '{print $4}')"
}

create_bucket() {
  if ! aws s3 ls | grep "$bucket_name" > /dev/null 2>&1; then
    log "bucket $bucket_name doesn't exist, creating"
    aws s4 mb "s3://$bucket_name" > /dev/null 2>&1
  fi
}

exists() {
  if aws s3 ls "$remote_path" > /dev/null 2>&1; then
    pull "$local_path_enc" "$remote_path"
    return 0
  else
    log "couldn't find S3 path $remote_path"
    return 1
  fi
}

list() {
  if exists; then
    decrypt
    while IFS= read -r line
    do
      printf '%s\n' "$line"
    done <<< "$decrypted"
  else
    echo "Can't find service $service in environment $env, you need to add a variable to create it"
  fi
}

list-services() {
  aws s3 ls "$remote_env_path" | awk '{sub("\.pem", "", $4); print $4 }'
}

copy() {
  if exists; then
    if aws s3 ls "$remote_path_copy" > /dev/null 2>&1; then
      echo "$service_to environment file already exists, do you want to overwrite? y/n"
      read -r confirm
      if [[ "$confirm" = "y" ]]; then
        aws s3 cp "$remote_path" "$remote_path_copy" > /dev/null 2>&1
      else 
        echo "aborting"
      fi
    else 
      aws s3 cp "$remote_path" "$remote_path_copy" > /dev/null 2>&1
    fi
  fi
}

add() {
  mkdir -p "$path"
  if [ -z "$value" ]; then
    echo "can't add a blank value to an environment file"
    exit 1
  fi
  if exists; then
    decrypt
    if grep "^$key\=" <<< "$decrypted" > /dev/null 2>&1; then
      output=$(sed "s/^\($key\=\).*$/\1${value}/" <<< "$decrypted")
    else
      output="${decrypted}"$'\n'"${env_var}"$'\n'
    fi
  else
    output="$env_var"
  fi
  output="$(echo "$output" | sort | sed '/./,$!d')"
  encrypt "$local_path_enc" "$output" "$key_id"
  push "$local_path_enc" "$remote_path"
  clean "$local_path_enc"
  echo "Added $key to $service successfully"
}

remove() {
  mkdir -p "$path"
  if exists; then
    decrypt
    output=$decrypted
    for key in "$@"
    do
      if grep "^$key\=" <<< "$output" > /dev/null 2>&1; then
        echo "Are you sure you want to remove the variable $key, y/n"
        read -r confirm
        if [[ "$confirm" = "y" ]]; then
          output=$(sed "/^\($key\=\).*/d" <<< "$output")
        else
          echo "aborting"
        fi
      else
        echo "$key not found"
      fi
    done
    if [[ -n "$output" ]]; then
      encrypt "$local_path_enc" "$output" "$key_id"
      push "$local_path_enc" "$remote_path"
      clean "$local_path_enc"
    else
      aws s3 rm "$remote_path" > /dev/null 2>&1
    fi
  fi
}

remove-service() {
  if exists; then
    echo "are you sure you want to remove service $service for environment $env? y/n"
    read -r confirm
    if [[ "$confirm" = "y" ]]; then
      aws s3 rm "$remote_path" > /dev/null 2>&1
    else 
      echo "aborting"
    fi
    echo "Removed $service succesfully from $env"
  fi
}

key-id() {
  echo "$key_id"
}

create-key() {
  if [[ -z "$key_id" ]]; then
    log "creating key"
    key_id=$(aws kms create-key --query "KeyMetadata.KeyId" --output "text")
    log "creating key alias $app for key id $key_id"
    aws kms create-alias --alias-name="alias/$app" --target-key-id="$key_id"
  else
    log "found key with alias $app, skipping key creation"
  fi
}

validate_aws_creds

if [ $# = 0 ]; then
  usage
  exit 1
fi

while getopts ":v:" o; do
  case "${o}" in
    v)
      verbose=$1; shift
      ;;
    *)
      usage
      exit 1
      ;;
  esac
done

cmd=$1; shift
case $cmd in
  "add")
    validate $# 5 "$cmd"
    validate_key
    app=$1; shift
    env=$1; shift
    service=$1; shift
    key=$1; shift
    value="${1}"; shift
    value="${value//\&/\\&}"
    env_var="$key=$value"
    validate_kms_key
    ;;
  "key-id")
    validate $# 1 "$cmd"
    app=$1; shift
    validate_kms_key
    ;;
  "create-key")
    validate $# 1 "$cmd"
    app=$1; shift
    set_key
    ;;
  "list")
    validate $# 3 "$cmd"
    app=$1; shift
    env=$1; shift
    service=$1; shift
    validate_kms_key
    ;;
  "list-services")
    validate $# 2 "$cmd"
    app=$1; shift
    env=$1; shift
    ;;
  "remove")
    validate $# 4 "$cmd"
    app=$1; shift
    env=$1; shift
    service=$1; shift
    validate_kms_key
    ;;
  "remove-service")
    validate $# 3 "$cmd"
    app=$1; shift
    env=$1; shift
    service=$1; shift
    ;;
  "copy")
    validate $# 4 "$cmd"
    app=$1; shift
    env=$1; shift
    service=$1; shift
    service_to=$1; shift
    ;;
  *)
    usage
    exit 1
    ;;
esac

bucket_name="$app-secrets"
path=~/.kms_secrets/"$bucket_name"/"$env"
local_path="$path/$service"
local_path_enc="${local_path}.pem"
remote_path="s3://$bucket_name/$env/${service}.pem"
remote_env_path="s3://$bucket_name/$env/"
remote_path_copy="s3://$bucket_name/$env/${service_to}.pem"

create_bucket

case $cmd in
  "add")
    add
    ;;

  "key-id")
    key-id 
    ;;
    
  "create-key")
    create-key
    ;;

  "list")
    list 
    ;;

  "list-services")
    list-services 
    ;;
    
  "copy")
    copy
    ;;

  "remove")
    remove "$@"
    ;;

  "remove-service")
    remove-service
    ;;
esac
